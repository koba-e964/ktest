     1 00000000                                 ; haribote-os boot asm
     2 00000000                                 ; TAB=4
     3 00000000                                 
     4 00000000                                 [instrset "i486p"]
     5  = 00000105                              VBEMODE equ 0x105 ; 1024 * 768, 8-bit color
     6 00000000                                 
     7  = 00280000                              BOTPAK	EQU		0x00280000		; bootpackのロード先
     8  = 00100000                              DSKCAC	EQU		0x00100000		; ディスクキャッシュの場所
     9  = 00008000                              DSKCAC0	EQU		0x00008000		; ディスクキャッシュの場所（リアルモード）
    10 00000000                                 
    11 00000000                                 ; BOOT_INFO関係
    12  = 00000FF0                              CYLS	EQU		0x0ff0			; ブートセクタが設定する
    13  = 00000FF1                              LEDS	EQU		0x0ff1
    14  = 00000FF2                              VMODE	EQU		0x0ff2			; 色数に関する情報。何ビットカラーか？
    15  = 00000FF4                              SCRNX	EQU		0x0ff4			; 解像度のX
    16  = 00000FF6                              SCRNY	EQU		0x0ff6			; 解像度のY
    17  = 00000FF8                              VRAM	EQU		0x0ff8			; グラフィックバッファの開始番地
    18 00000000                                 
    19 00000000                                 
    20 00000000                                 
    21 00000000                                 
    22                                          		ORG		0xc200			; このプログラムがどこに読み込まれるのか
    23 0000C200                                 
    24 0000C200                                 ;checking existence of VBE
    25 0000C200 B8 9000                         	mov ax,9000h
    26 0000C203 8E C0                           	mov es,ax
    27 0000C205 BF 0000                         	mov di,0
    28 0000C208 B8 4F00                         	mov ax,4f00h
    29 0000C20B CD 10                           	int 10h
    30 0000C20D 3D 004F                         	cmp ax,004fh
    31 0000C210 75 51                           	jne scrn320 ;int10(ax=0x4f00 es:di=0x90000)!=0x4f
    32 0000C212                                 
    33 0000C212                                 ;checking version of VBE
    34 0000C212 26 8B 45 04                     	mov  ax,[es:di+4]
    35 0000C216 3D 0200                         	cmp ax,200h
    36 0000C219 72 48                           	jb scrn320
    37 0000C21B                                 ;get screen info
    38 0000C21B B9 0105                         	mov cx,VBEMODE
    39 0000C21E B8 4F01                         	mov ax,4f01h
    40 0000C221 CD 10                           	int 10h
    41 0000C223 3D 004F                         	cmp ax,4fh
    42 0000C226 75 3B                           	jne scrn320
    43 0000C228                                 
    44 0000C228                                 ;confirmation of screen info
    45 0000C228 26 80 7D 19 08                  	cmp byte [es:di+19h],8
    46 0000C22D 75 34                           	jne scrn320
    47 0000C22F 26 80 7D 1B 04                  	cmp byte[es:di+1bh],4
    48 0000C234 75 2D                           	jne scrn320
    49 0000C236 26 F7 05 0080                   	test word[es:di],80h
    50 0000C23B 74 26                           	jz scrn320
    51 0000C23D                                 
    52 0000C23D                                 ;switch screen mode
    53 0000C23D BB 4105                         	mov bx,VBEMODE+4000h
    54 0000C240 B8 4F02                         	mov ax,4f02h
    55 0000C243 CD 10                           	int 10h
    56 0000C245 C6 06 0FF2 08                   	mov byte[VMODE],8
    57 0000C24A 26 8B 45 12                     	mov ax,[es:di+12h]
    58 0000C24E A3 0FF4                         	mov [SCRNX],ax
    59 0000C251 26 8B 45 14                     	mov ax,[es:di+14h]
    60 0000C255 A3 0FF6                         	mov [SCRNY],ax
    61 0000C258 66 26 8B 45 28                  	mov eax,[es:di+28h]
    62 0000C25D 66 A3 0FF8                      	mov [VRAM],EAX
    63 0000C261 EB 20                           	jmp keystatus
    64 0000C263                                 
    65 0000C263                                 ; 画面モードを設定(320*200)
    66 0000C263                                 scrn320:
    67 0000C263 B0 13                           		MOV		AL,0x13			; VGAグラフィックス、320x200x8bitカラー
    68 0000C265 B4 00                           		MOV		AH,0x00
    69 0000C267 CD 10                           		INT		0x10
    70 0000C269 C6 06 0FF2 08                   		MOV		BYTE [VMODE],8	; 画面モードをメモする（C言語が参照する）
    71 0000C26E C7 06 0FF4 0140                 		MOV		WORD [SCRNX],320 ;320
    72 0000C274 C7 06 0FF6 00C8                 		MOV		WORD [SCRNY],200 ;200
    73 0000C27A 66 C7 06 0FF8 000A0000          		MOV		DWORD [VRAM],0x000a0000
    74 0000C283                                 
    75 0000C283                                 ; キーボードのLED状態をBIOSに教えてもらう
    76 0000C283                                 keystatus:
    77 0000C283 B4 02                           		MOV		AH,0x02
    78 0000C285 CD 16                           		INT		0x16 			; keyboard BIOS
    79 0000C287 A2 0FF1                         		MOV		[LEDS],AL
    80 0000C28A                                 
    81 0000C28A                                 ; PICが一切の割り込みを受け付けないようにする
    82 0000C28A                                 ;	AT互換機の仕様では、PICの初期化をするなら、
    83 0000C28A                                 ;	こいつをCLI前にやっておかないと、たまにハングアップする
    84 0000C28A                                 ;	PICの初期化はあとでやる
    85 0000C28A                                 
    86 0000C28A B0 FF                           		MOV		AL,0xff
    87 0000C28C E6 21                           		OUT		0x21,AL
    88 0000C28E 90                              		NOP						; OUT命令を連続させるとうまくいかない機種があるらしいので
    89 0000C28F E6 A1                           		OUT		0xa1,AL
    90 0000C291                                 
    91 0000C291 FA                              		CLI						; さらにCPUレベルでも割り込み禁止
    92 0000C292                                 
    93 0000C292                                 ; CPUから1MB以上のメモリにアクセスできるように、A20GATEを設定
    94 0000C292                                 
    95 0000C292 E8 00B5                         		CALL	waitkbdout
    96 0000C295 B0 D1                           		MOV		AL,0xd1
    97 0000C297 E6 64                           		OUT		0x64,AL
    98 0000C299 E8 00AE                         		CALL	waitkbdout
    99 0000C29C B0 DF                           		MOV		AL,0xdf			; enable A20
   100 0000C29E E6 60                           		OUT		0x60,AL
   101 0000C2A0 E8 00A7                         		CALL	waitkbdout
   102 0000C2A3                                 
   103 0000C2A3                                 ; プロテクトモード移行
   104 0000C2A3                                 
   105 0000C2A3                                 [INSTRSET "i486p"]				; 486の命令まで使いたいという記述
   106 0000C2A3                                 
   107 0000C2A3 0F 01 16 C38A                   		LGDT	[GDTR0]			; 暫定GDTを設定
   108 0000C2A8 0F 20 C0                        		MOV		EAX,CR0
   109 0000C2AB 66 25 7FFFFFFF                  		AND		EAX,0x7fffffff	; bit31を0にする（ページング禁止のため）
   110 0000C2B1 66 83 C8 01                     		OR		EAX,0x00000001	; bit0を1にする（プロテクトモード移行のため）
   111 0000C2B5 0F 22 C0                        		MOV		CR0,EAX
   112 0000C2B8 EB 00                           		JMP		pipelineflash
   113 0000C2BA                                 pipelineflash:
   114 0000C2BA B8 0008                         		MOV		AX,1*8			;  読み書き可能セグメント32bit
   115 0000C2BD 8E D8                           		MOV		DS,AX
   116 0000C2BF 8E C0                           		MOV		ES,AX
   117 0000C2C1 8E E0                           		MOV		FS,AX
   118 0000C2C3 8E E8                           		MOV		GS,AX
   119 0000C2C5 8E D0                           		MOV		SS,AX
   120 0000C2C7                                 
   121 0000C2C7                                 
   122 0000C2C7                                 ; bootpackの転送
   123 0000C2C7                                 
   124 0000C2C7 66 BE 0000C390                  		MOV		ESI,bootpack	; 転送元
   125 0000C2CD 66 BF 00280000                  		MOV		EDI,BOTPAK		; 転送先
   126 0000C2D3 66 B9 00020000                  		MOV		ECX,512*1024/4
   127 0000C2D9 E8 0077                         		CALL	memcpy
   128 0000C2DC                                 
   129 0000C2DC                                 ; ついでにディスクデータも本来の位置へ転送
   130 0000C2DC                                 
   131 0000C2DC                                 ; まずはブートセクタから
   132 0000C2DC                                 
   133 0000C2DC 66 BE 00007C00                  		MOV		ESI,0x7c00		; 転送元
   134 0000C2E2 66 BF 00100000                  		MOV		EDI,DSKCAC		; 転送先
   135 0000C2E8 66 B9 00000080                  		MOV		ECX,512/4
   136 0000C2EE E8 0062                         		CALL	memcpy
   137 0000C2F1                                 
   138 0000C2F1                                 ; 残り全部
   139 0000C2F1                                 
   140 0000C2F1 66 BE 00008200                  		MOV		ESI,DSKCAC0+512	; 転送元
   141 0000C2F7 66 BF 00100200                  		MOV		EDI,DSKCAC+512	; 転送先
   142 0000C2FD 66 B9 00000000                  		MOV		ECX,0
   143 0000C303 8A 0E 0FF0                      		MOV		CL,BYTE [CYLS]
   144 0000C307 66 69 C9 00001200               		IMUL	ECX,512*18*2/4	; シリンダ数からバイト数/4に変換
   145 0000C30E 66 81 E9 00000080               		SUB		ECX,512/4		; IPLの分だけ差し引く
   146 0000C315 E8 003B                         		CALL	memcpy
   147 0000C318                                 ; asmheadでしなければいけないことは全部し終わったので、
   148 0000C318                                 ;	あとはbootpackに任せる
   149 0000C318                                 
   150 0000C318                                 ; bootpackの起動
   151 0000C318                                 
   152 0000C318 66 BB 00280000                  		MOV		EBX,BOTPAK
   153 0000C31E 67 66 8B 4B 10                  		MOV		ECX,[EBX+16]
   154 0000C323 66 83 C1 03                     		ADD		ECX,3			; ECX += 3;
   155 0000C327 66 C1 E9 02                     		SHR		ECX,2			; ECX /= 4;
   156 0000C32B 74 10                           		JZ		skip			; 転送するべきものがない
   157 0000C32D 67 66 8B 73 14                  		MOV		ESI,[EBX+20]	; 転送元
   158 0000C332 66 01 DE                        		ADD		ESI,EBX
   159 0000C335 67 66 8B 7B 0C                  		MOV		EDI,[EBX+12]	; 転送先
   160 0000C33A E8 0016                         		CALL	memcpy
   161 0000C33D                                 skip:
   162 0000C33D 67 66 8B 63 0C                  		MOV		ESP,[EBX+12]	; スタック初期値
   163 0000C342 66 EA 0000001B 0010             		JMP		DWORD 2*8:0x001b
   164 0000C34A                                 
   165 0000C34A                                 waitkbdout:
   166 0000C34A E4 64                           		IN		 AL,0x64
   167 0000C34C 24 02                           		AND		 AL,0x02
   168 0000C34E E4 60                           		IN		 AL,0x60 		; から読み(受信バッファが悪さをしないように)
   169 0000C350 75 F8                           		JNZ		waitkbdout		; ANDの結果が0でなければwaitkbdoutへ
   170 0000C352 C3                              		RET
   171 0000C353                                 
   172 0000C353                                 memcpy:
   173 0000C353 67 66 8B 06                     		MOV		EAX,[ESI]
   174 0000C357 66 83 C6 04                     		ADD		ESI,4
   175 0000C35B 67 66 89 07                     		MOV		[EDI],EAX
   176 0000C35F 66 83 C7 04                     		ADD		EDI,4
   177 0000C363 66 83 E9 01                     		SUB		ECX,1
   178 0000C367 75 EA                           		JNZ		memcpy			; 引き算した結果が0でなければmemcpyへ
   179 0000C369 C3                              		RET
   180 0000C36A                                 ; memcpyはアドレスサイズプリフィクスを入れ忘れなければ、ストリング命令でも書ける
   181 0000C36A                                 
   182 0000C36A 00 00 00 00 00 00               		ALIGNB	16
   183 0000C370                                 GDT0:
   184 0000C370 00 00 00 00 00 00 00 00         		RESB	8				; ヌルセレクタ
   185 0000C378 FFFF 0000 9200 00CF             		DW		0xffff,0x0000,0x9200,0x00cf	; 読み書き可能セグメント32bit
   186 0000C380 FFFF 0000 9A28 0047             		DW		0xffff,0x0000,0x9a28,0x0047	; 実行可能セグメント32bit（bootpack用）
   187 0000C388                                 
   188 0000C388 0000                            		DW		0
   189 0000C38A                                 GDTR0:
   190 0000C38A 0017                            		DW		8*3-1
   191 0000C38C 0000C370                        		DD		GDT0
   192 0000C390                                 
   193 0000C390                                 		ALIGNB	16
   194 0000C390                                 bootpack:
